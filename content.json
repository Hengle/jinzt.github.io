{"meta":{"title":"金振涛个人主页","subtitle":null,"description":null,"author":"金振涛","url":"https://jinzt.github.io","root":"/"},"pages":[{"title":"about","date":"2019-07-09T10:04:30.000Z","updated":"2019-07-10T06:30:52.343Z","comments":true,"path":"about/index.html","permalink":"https://jinzt.github.io/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-07-09T10:04:21.000Z","updated":"2019-07-10T06:31:06.200Z","comments":true,"path":"categories/index.html","permalink":"https://jinzt.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-09T10:04:25.000Z","updated":"2019-07-10T06:31:18.967Z","comments":true,"path":"tags/index.html","permalink":"https://jinzt.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"colyseus 使用","slug":"cocos creator/colyseus","date":"2019-07-11T10:44:49.673Z","updated":"2019-07-11T11:40:41.184Z","comments":true,"path":"posts/b2aa3fd2.html","link":"","permalink":"https://jinzt.github.io/posts/b2aa3fd2.html","excerpt":"","text":"介绍colyseus 主页 使用 colyseus 的优秀文章 io类游戏快速开发 1 io类游戏快速开发 2 帧同步 IO类游戏快速开发 3 状态同步 其它文章 colyseus.js, 用于JavaScript的多人游戏客户端 对等游戏平台的可扩展性与状态一致性的分析.pdf colyseus 作者的项目 colyseus-server colyseus.js colyseus-examples colyseus-loadtest colyseus-monitor 其它开发者 platformer-mmo bomberman-colyseus mem-server-colyseus colyseus-cluster-example colyseus-without-sync phaser-colyseus-pac multiplayer_shooter_game pong-client PongServer mem-server Yggdrasill auditory","categories":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://jinzt.github.io/categories/cocos-creator/"}],"tags":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://jinzt.github.io/tags/cocos-creator/"},{"name":"nodejs","slug":"nodejs","permalink":"https://jinzt.github.io/tags/nodejs/"}]},{"title":"excel2json 使用","slug":"tool/excel2json","date":"2019-07-11T09:04:07.095Z","updated":"2019-07-11T10:49:41.846Z","comments":true,"path":"posts/b2aa3fd2.html","link":"","permalink":"https://jinzt.github.io/posts/b2aa3fd2.html","excerpt":"","text":"工程代码 https://github.com/jinzt/excel2json 是根据 https://github.com/zdhsoft/excel2json 修改而来，非常感谢原作者。 工具使用excel表格配置excel表配置主要有tablelist标签页和其它内容标签页构成。 tablelist标签页tablelist标签页是用来导出其它内容标签页的配置，它包括 目标标签页、描述、导出文件名、导出字段、导出类型 tablelist 每个记录代表一个导出操作，比如上图中每个标签页分别有两份导出配置记录，分别对应客户端使用和服务器使用，他们的区别在于导出文件名和导出字段不一样。 tablelist 一共支持三种导出类型 key:array key:map key:value，这三种类型是我自己总结最常用的三种 内容标签页内容标签页的第一行是列名，第二行是列的类型，这里一共设计了6中类型，分别是 INT、FLOAT、BOOL、STRING、OBJECT、ANY。前四种类型都很好理解，OBJECT是json类型，它必须是一个合法jsonANY是任意类型，它可以是其它5种类型的任意一种，仅适用于key:value类型标签页,ANY类型列中 key:array 是数组结构，它有多个列，每个列属性类型一样，所有列构成一个字典对象，作为数组的一条记录,配置表示例如下 key:array 导出 test_key_array_s.json 如下: 12345[ &#123; \"ID\":100, \"Ratio\":0.6, \"Reward\":[2,3,4], \"TaxRatio\":&#123;\"Ratio\":1, \"Base\":10000&#125; &#125;, &#123; \"ID\":101, \"Ratio\":0.7, \"Reward\":[3,5,7], \"TaxRatio\":&#123;\"Ratio\":1, \"Base\":10000&#125; &#125;, &#123; \"ID\":102, \"Ratio\":0.5, \"Reward\":[10,15,20], \"TaxRatio\":&#123;\"Ratio\":1, \"Base\":1000&#125; &#125;] key:map 是字典结构，它有多个列，每个列属性类型一样，第一列作为字典的key并且只能是string类型,配置表示例如下 key:map 导出 test_key_map_s.json 如下: 1234&#123; \"test001\": &#123; \"Key\":\"test001\", \"Name\":\"zhangsan\", \"Age\":18 &#125;, \"test002\": &#123; \"Key\":\"test002\", \"Name\":\"lisi\", \"Age\":19 &#125;&#125; key:value 是键值对结构，他是一种特殊字典结构，它只有两列，第一列作为key并且只能是string类型，第二列是值，它是任意类型,配置表示例如下 key:value 导出 test_key_value_s.json 如下: 12345678910111213&#123; \"KEY_INT\":100, \"KEY_FLOAT\":0.23, \"KEY_BOOL\":true, \"KEY_OBJECT_ARRAY\":[10,20], \"KEY_OBJECT_DICT\":&#123;\"Ratio\":1, \"Base\":10000&#125;, \"KEY_STRING\":\"string test\", \"KEY_STRING_INT\":\"100\", \"KEY_STRING_FLOAT\":\"0.23\", \"KEY_STRING_BOOL\":\"true\", \"KEY_STRING_OBJECT_ARRAY\":\"[10,20]\", \"KEY_STRING_OBJECT_DICT\":\"\\\"&#123;\\\"Ratio\\\":1, \\\"Base\\\":10000&#125;\\\"\"&#125; 导出json导出json的工具是使用python开发的，脚本 excel2json.py，可以直接使用脚本导出 1python excel2json.py config.xlsx 更方便的方式是使用打包后的二进制文件 excel2json.exe 进行导出 1excel2json.exe config.xlsx 每次输入命令进行转换比较繁琐，这里使用windows批处理来优化，新建一个 convert.bat 文件，内容如下: 12345678910@echo off:: delete all *.jsonecho del all *.jsondel /s *.json:: covert configexcel2json.exe config.xlsxpause 然后双击 convert.bat 即可自动转换，你也可以在批处理里加上 拷贝json到客户端及服务器目录,提交到git、svn等等 json加载示范这里使用golang来进行举例 load_json.go 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495package mainimport ( \"encoding/json\" \"fmt\" \"io/ioutil\" \"log\")type KeyMapItem struct &#123; ID string `json:\"ID\"` Name string `json:\"Name\"` Age uint32 `json:\"Age\"`&#125;func loadKeyMapJson() &#123; fileName := \"test_key_map_s.json\" data, err := ioutil.ReadFile(fileName) if err != nil &#123; log.Printf(\"ReadFile %s open failed err:%+v\", fileName, err) return &#125; var mapResult map[string]KeyMapItem err = json.Unmarshal(data, &amp;mapResult) if err != nil &#123; log.Printf(\"ReadFile %s Unmarshal failed err:%+v\", fileName, err) return &#125; fmt.Printf(\"loadKeyMapJson :%+v\", mapResult)&#125;type probability struct &#123; Ratio uint32 `json:\"Ratio\"` Base uint32 `json:\"Base\"`&#125;type KeyArrayItem struct &#123; ID uint32 `json:\"ID\"` Ratio float32 `json:\"Ratio\"` Reward []uint32 `json:\"Reward\"` TaxRatio probability `json:\"TaxRatio\"`&#125;func loadKeyArrayJson() &#123; fileName := \"test_key_array_s.json\" data, err := ioutil.ReadFile(fileName) if err != nil &#123; log.Printf(\"ReadFile %s open failed err:%+v\", fileName, err) return &#125; var arrayResult []KeyArrayItem err = json.Unmarshal(data, &amp;arrayResult) if err != nil &#123; log.Printf(\"ReadFile %s Unmarshal failed err:%+v\", fileName, err) return &#125; fmt.Printf(\"loadKeyArrayJson :%+v\", arrayResult)&#125;type KeyValueItem struct &#123; KEY_INT uint32 `json:\"KEY_INT\"` KEY_FLOAT float32 `json:\"KEY_FLOAT\"` KEY_BOOL bool `json:\"KEY_BOOL\"` KEY_OBJECT_ARRAY []uint32 `json:\"KEY_OBJECT_ARRAY\"` KEY_OBJECT_DICT probability `json:\"KEY_OBJECT_DICT\"` KEY_STRING string `json:\"KEY_STRING\"` KEY_STRING_INT string `json:\"KEY_STRING_INT\"` KEY_STRING_FLOAT string `json:\"KEY_STRING_FLOAT\"` KEY_STRING_BOOL string `json:\"KEY_STRING_BOOL\"` KEY_STRING_OBJECT_ARRAY string `json:\"KEY_STRING_OBJECT_ARRAY\"` KEY_STRING_OBJECT_DICT string `json:\"KEY_STRING_OBJECT_DICT\"`&#125;func loadKeyValueJson() &#123; fileName := \"test_key_value_s.json\" data, err := ioutil.ReadFile(fileName) if err != nil &#123; log.Printf(\"ReadFile %s open failed err:%+v\", fileName, err) return &#125; var valueResult KeyValueItem err = json.Unmarshal(data, &amp;valueResult) if err != nil &#123; log.Printf(\"ReadFile %s Unmarshal failed err:%+v\", fileName, err) return &#125; fmt.Printf(\"loadKeyValueJson :%+v\", valueResult)&#125;func main() &#123; loadKeyMapJson() loadKeyArrayJson() loadKeyValueJson()&#125; 修改代码如果需要对源码进行修改，那么需要安装python2.7 python脚本打包为exe借助了pyinstaller，这里使用pip安装pyinstaller，之后进行打包 1pip install pyinstaller 安装好后就可以使用pyinstaller命令进行打包了 1pyinstaller -F excel2json.py 这样会在dist目录生成 excel2json.exe 可执行文件了 star欢迎star，个人博客 https://jinzt.github.io","categories":[{"name":"tool","slug":"tool","permalink":"https://jinzt.github.io/categories/tool/"}],"tags":[{"name":"tool","slug":"tool","permalink":"https://jinzt.github.io/tags/tool/"}]},{"title":"hexo 搭建博客","slug":"tool/hexo-blog","date":"2019-07-11T08:23:45.261Z","updated":"2019-07-11T09:19:27.075Z","comments":true,"path":"posts/98b6a901.html","link":"","permalink":"https://jinzt.github.io/posts/98b6a901.html","excerpt":"","text":"搭建个人博客 hexo快速开始12345npm install hexo-cli -ghexo init blogsitecd blogsitenpm installhexo server 部署github创建仓库jinzt.github.io 并开启gitpages安装 git-deploy 插件1npm install hexo-deployer-git --save 修改 _config.yml：deploy配置项1234deploy: type: git repo: git@github.com:jinzt/jinzt.github.io.git branch: master 配置自定义域名source 目录下新建一个 CNAME 文件,然后文件里填入自定义域名 jinzt.top 如果没有自定义域名不用做这一步 生成静态文件12hexo cleanhexo generate 发布1hexo d -g 访问jinzt.github.io 或者自定义域名 jinzt.top 访问主页 将代码纳入git管理创建一个私有仓库 blog 分支用于存放代码git clone git@github.com:jinzt/blog.gitcd blog 拷贝 blogsite 里内容到仓库 blog 目录 创建一个shell脚本方便发布 deploy.sh 123456789#!/usr/bin/bashhexo cleanhexo generatehexo d -ggit add .git commit -m &quot;up blog&quot;git push 主题使用主题推荐 next hexo-theme-mellow这里选择 hexo-theme-indigo 安装主题安装git clone https://github.com/yscoder/hexo-theme-indigo themes/indigo 依赖安装1234npm install hexo-renderer-less --savenpm install hexo-generator-feed --savenpm install hexo-generator-json-content --savenpm install hexo-helper-qrcode --save 切换主题修改 站点配置 1theme: indigo 添加分类页1hexo new page categories 修改 source/categories/index.md 增加 1layout: categories 添加标签页1hexo new page tags 修改 source/tags/index.md 增加 1layout: tags 添加关于页1hexo new page about 修改 source/about/index.md 增加 1layout: about 避免 README.md 被渲染在 source 目录下创建 README.md 然后在站点配置中修改 1skip_render: README.md 配置站点配置基本配置为了得到更好的使用体验，以下内容请务必填写完整，因为这些内容会在主题中得到展示。更多 1234567title: your titlesubtitle: your subtitledescription: your descriptionkeywords: your keywordsauthor: your nameemail: your emailurl: your site url 修改永久链接的默认格式安装插件 1npm install hexo-abbrlink --save 修改 站点配置 123456# permalink: :year/:month/:day/:title/# permalink_defaults:permalink: posts/:abbrlink.htmlabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 本地图片npm install hexo-asset-image –save 把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true 在 xxx.md 同层目录创建 xxx 目录，然后在 xxx.md 中 key:array 方式引用图片就可以了 主题配置编辑主题配置文件，themes/indigo/_config.yml。 左侧菜单1234567891011121314151617181920212223menu: home: text: 主页 url: / archives: text: 归档 url: /archives tags: text: 标签 url: /tags th-list: text: 分类 url: /categories github: url: https://github.com/jinzt target: _blank weibo: text: weibo url: https://weibo.com/u/5838016173 target: _blank link: text: link url: /custom favicon站点 logo，显示在浏览器当前标签页左上角。 1favicon: /favicon.ico 头像位于左侧菜单上方 1avatar: /img/avatar.jpg 邮箱头像下方 1email: jinzhentaohb@126.com 评论评论使用 [valine] (https://valine.js.org/) 配置 12345gitalk: true owner:jinzt repo:https://github.com/jinzt/Gitment.git client_id:457419dabf2c70fa6083 client_secret:cb2fc4337105912d7170dab8b994d637f96afd79 文章打赏1234reward: title: 谢谢大爷~ #显示的文字 wechat: /img/wechat.jpg #微信，关闭设为 false alipay: /img/alipay.jpg #支付宝，关闭设为 false 参考 hexo官方文档 next主题文档 如何使用 Hexo 和 GitHub Pages 搭建这个博客 Hexo NexT 博客后台管理指南 Hexo next博客添加折叠块功能添加折叠代码块 Hexo next主题使用gitment评论 markdown插入音乐","categories":[{"name":"tool","slug":"tool","permalink":"https://jinzt.github.io/categories/tool/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://jinzt.github.io/tags/markdown/"},{"name":"blog","slug":"blog","permalink":"https://jinzt.github.io/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"https://jinzt.github.io/tags/hexo/"}]},{"title":"git 使用","slug":"tool/git","date":"2019-07-11T08:23:45.259Z","updated":"2019-07-11T08:59:18.582Z","comments":true,"path":"posts/86c88f6a.html","link":"","permalink":"https://jinzt.github.io/posts/86c88f6a.html","excerpt":"","text":"git 使用 …or create a new repository on the command line echo “# blog” &gt;&gt; README.mdgit initgit add README.mdgit commit -m “first commit”git remote add origin https://github.com/jinzt/blog.gitgit push -u origin master …or push an existing repository from the command line git remote add origin https://github.com/jinzt/blog.gitgit push -u origin master","categories":[{"name":"tool","slug":"tool","permalink":"https://jinzt.github.io/categories/tool/"}],"tags":[{"name":"tool","slug":"tool","permalink":"https://jinzt.github.io/tags/tool/"}]}]}